# -*- coding: utf-8 -*-
"""study topic planner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cD3XgJAN_9MAsaJNPtE5DdUTbukluZFQ
"""

!pip install langchain langchain_core langchain_groq langchain_community langchain langgraph

import os
from typing import TypedDict, Annotated, List
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables.graph import MermaidDrawMethod
from IPython.display import display, Image

from langchain_groq import ChatGroq
llm = ChatGroq(
    temperature = 0,
    groq_api_key= "gsk_RHCBRhSWlS8tbxo1jSimWGdyfghfdtyudb3FYlVgf14l1wuLFEpkF7wrmtm5K",
    model_name = "llama-3.3-70b-versatile"
)

import os
from typing import TypedDict, Annotated, List
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables.graph import MermaidDrawMethod
from IPython.display import display, Image



from langchain_groq import ChatGroq
llm = ChatGroq(
    temperature = 0,
    groq_api_key= "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",
    model_name = "llama-3.3-70b-versatile"
)



learning_plan_prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful and knowledgeable AI tutor. Create a personalized learning plan for {subject} based on the user's preferred learning style: {learning_style}. Provide a brief, structured plan."),
    ("human", "Create a personalized learning plan for me."),
])

answer_question_prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a subject matter expert in {subject}. Answer the user's question: {question} in a way that matches their learning style: {learning_style}. Provide a clear, concise, and engaging explanation."),
    ("human", "Answer my question."),
])


class PlannerState(TypedDict):
    messages: List[HumanMessage | AIMessage]
    subject: str
    question: str
    learning_style: str
    answer: str
    learning_plan: str

def input_subject(state: PlannerState) -> PlannerState:
    print("What subject do you want to learn?")
    subject_message = input("Your Input (Subject): ")
    return {
        **state,
        "subject": subject_message,
        "messages": state['messages'] + [HumanMessage(content=subject_message)],
    }

def input_question(state: PlannerState) -> PlannerState:
    print(f"What question do you have about {state['subject']}?")
    question_message = input("Your Input (Question): ")
    return {
        **state,
        "question": question_message,
        "messages": state['messages'] + [HumanMessage(content=question_message)],
    }

def input_learning_style(state: PlannerState) -> PlannerState:
    print("What is your preferred learning style? (e.g., visual, auditory, hands-on, reading/writing): ")
    style_message = input("Your Input (Learning Style): ")
    return {
        **state,
        "learning_style": style_message,
        "messages": state['messages'] + [HumanMessage(content=style_message)],
    }

def answer_question(state: PlannerState) -> PlannerState:
    print(f"Answering your question: {state['question']} about {state['subject']} in your learning style: {state['learning_style']}")
    response = llm.invoke(answer_question_prompt.format_messages(
        subject=state['subject'],
        question=state['question'],
        learning_style=state['learning_style']
    ))
    print("\nAnswer to your question:")
    print(response.content)
    return {
        **state,
        "messages": state['messages'] + [AIMessage(content=response.content)],
        "answer": response.content,
    }

def create_learning_plan(state: PlannerState) -> PlannerState:
    print(f"Creating a learning plan for {state['subject']} based on your learning style: {state['learning_style']}")
    response = llm.invoke(learning_plan_prompt.format_messages(
        subject=state['subject'],
        learning_style=state['learning_style']
    ))
    print("\nYour Personalized Learning Plan:")
    print(response.content)
    return {
        **state,
        "messages": state['messages'] + [AIMessage(content=response.content)],
        "learning_plan": response.content,
    }

workflow = StateGraph(PlannerState)

workflow.add_node("input_subject", input_subject)
workflow.add_node("input_question", input_question)
workflow.add_node("input_learning_style", input_learning_style)
workflow.add_node("answer_question", answer_question)
workflow.add_node("create_learning_plan", create_learning_plan)

workflow.set_entry_point("input_subject")

workflow.add_edge("input_subject", "input_question")
workflow.add_edge("input_question", "input_learning_style")
workflow.add_edge("input_learning_style", "answer_question")
workflow.add_edge("answer_question", "create_learning_plan")
workflow.add_edge("create_learning_plan", END)

app = workflow.compile()

def ai_tutor(user_request: str):
    print(f"Initial Request: {user_request}\n")
    state = {
        "messages": [HumanMessage(content=user_request)],
        "subject": "",
        "question": "",
        "learning_style": "",
        "answer": "",
        "learning_plan": "",
    }
    for output in app.stream(state):
        pass

user_request = "I want to learn something new."
ai_tutor(user_request)
